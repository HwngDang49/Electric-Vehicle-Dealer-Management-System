import React, { useState, useEffect } from "react";
import "./QuotationDetailView.css";
import quoteApiService from "../../services/quoteApi";
import customerApiService from "../../services/customerApi";

const QuotationDetailView = ({
  quotation,
  onClose,
  formatCurrency,
  onUpdateQuotation,
  onConvertToOrder,
}) => {
  console.log("QuotationDetailView received quotation:", quotation);
  const [isSent, setIsSent] = useState(false);
  const [isFinalized, setIsFinalized] = useState(false);
  const [customerDetails, setCustomerDetails] = useState(null);
  const [loadingCustomer, setLoadingCustomer] = useState(false);

  // C·∫≠p nh·∫≠t state d·ª±a tr√™n tr·∫°ng th√°i c·ªßa quotation
  useEffect(() => {
    if (quotation) {
      setIsSent(
        quotation.status === "Sent" || quotation.status === "Finalized"
      );
      setIsFinalized(quotation.status === "Finalized");

      // L·∫•y th√¥ng tin customer ƒë·∫ßy ƒë·ªß
      if (quotation.customer?.id) {
        loadCustomerDetails(quotation.customer.id);
      }
    }
  }, [quotation]);

  // H√†m l·∫•y th√¥ng tin customer ƒë·∫ßy ƒë·ªß
  const loadCustomerDetails = async (customerId) => {
    try {
      setLoadingCustomer(true);
      console.log("üåê Loading customer details for ID:", customerId);
      const response = await customerApiService.getCustomerById(customerId);
      console.log("‚úÖ Customer details loaded:", response);
      setCustomerDetails(response.data);
    } catch (error) {
      console.error("‚ùå Error loading customer details:", error);
      // Kh√¥ng hi·ªÉn th·ªã l·ªói cho user, ch·ªâ log
    } finally {
      setLoadingCustomer(false);
    }
  };

  // Debug: Check if quotation exists
  if (!quotation) {
    console.log("Quotation is null or undefined");
    return (
      <div className="quotation-detail-view">
        <div className="error-message">
          <h2>Kh√¥ng t√¨m th·∫•y b√°o gi√°</h2>
          <p>B√°o gi√° kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
          <button className="back-btn" onClick={onClose}>
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  const handleSendQuotation = async () => {
    if (!isSent) {
      // B∆∞·ªõc 1: G·ª≠i b√°o gi√° - ch·ªâ c·∫≠p nh·∫≠t local state
      setIsSent(true);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong parent component (ch·ªâ local)
      if (onUpdateQuotation) {
        onUpdateQuotation(quotation.id, {
          ...quotation,
          status: "Sent", // Tr·∫°ng th√°i t·∫°m th·ªùi
        });
      }

      console.log("‚úÖ Quote sent (local state updated)");
      alert("B√°o gi√° ƒë√£ ƒë∆∞·ª£c g·ª≠i! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ghi nh·∫≠n b√°o gi√°.");
    } else if (!isFinalized) {
      // B∆∞·ªõc 2: Ghi nh·∫≠n b√°o gi√° - g·ªçi API finalizeQuote
      try {
        const quoteId = quotation.backendId;
        if (!quoteId) {
          throw new Error("Kh√¥ng t√¨m th·∫•y ID b√°o gi√° ƒë·ªÉ ghi nh·∫≠n");
        }

        console.log("üåê Finalizing quote with ID:", quoteId);
        console.log("üåê Quote object:", quotation);
        console.log("üåê Auth token:", localStorage.getItem("authToken"));

        const response = await quoteApiService.finalizeQuote(quoteId);
        console.log("‚úÖ Quote finalized successfully:", response);

        setIsFinalized(true);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong parent component
        if (onUpdateQuotation) {
          onUpdateQuotation(quotation.id, {
            ...quotation,
            status: "Finalized",
          });
        }

        alert("B√°o gi√° ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n th√†nh c√¥ng!");
      } catch (error) {
        console.error("‚ùå Error finalizing quote:", error);
        console.error("‚ùå Error details:", {
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data,
          message: error.message,
          config: error.config,
        });

        // Show detailed error message
        let errorMessage = "C√≥ l·ªói x·∫£y ra khi ghi nh·∫≠n b√°o gi√°";

        if (error.response?.status === 401) {
          errorMessage = "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
        } else if (error.response?.status === 404) {
          errorMessage = "Kh√¥ng t√¨m th·∫•y b√°o gi√° ho·∫∑c endpoint kh√¥ng t·ªìn t·∫°i.";
        } else if (error.response?.data?.message) {
          errorMessage = error.response.data.message;
        } else if (error.message) {
          errorMessage = error.message;
        }

        alert(`L·ªói: ${errorMessage}`);
      }
    }
  };

  const handleConvertToOrder = () => {
    if (isFinalized && onConvertToOrder) {
      // Convert quotation to order format
      const orderData = {
        id: `DH${Date.now()}`, // Generate new order ID
        customer: {
          name: quotation.customer.name,
          phone: quotation.customer.phone,
        },
        vehicle: {
          name: quotation.vehicle.name,
          color: quotation.vehicle.color,
        },
        amount: `${
          quotation.quotation?.finalPrice || quotation.vehicle?.price || 0
        }`,
        status: "Draft",
        statusType: "draft",
        date: new Date().toISOString().split("T")[0],
        // Additional fields for order
        deposit: quotation.quotation?.discountAmount || 0,
        finalPrice:
          quotation.quotation?.finalPrice || quotation.vehicle?.price || 0,
        discount: quotation.quotation?.discount || 0,
        tax: 0, // Default tax
      };

      onConvertToOrder(orderData);
    }
  };

  return (
    <div className="quotation-detail-view">
      <div className="detail-header">
        <div className="header-content">
          <div className="header-text">
            <h1>Chi ti·∫øt b√°o gi√°</h1>
            <p>Xem th√¥ng tin chi ti·∫øt b√°o gi√° #{quotation.id}</p>
          </div>
          <div className="header-actions">
            <button type="button" className="back-btn" onClick={onClose}>
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" />
              </svg>
              Quay l·∫°i
            </button>
          </div>
        </div>
      </div>

      <div className="detail-content">
        <div className="detail-layout">
          {/* Left Column - Details */}
          <div className="detail-left">
            <div className="detail-sections">
              {/* Customer Information */}
              <div className="detail-section">
                <h3>Th√¥ng tin kh√°ch h√†ng</h3>
                <div className="info-grid">
                  <div className="info-item">
                    <label>H·ªç v√† t√™n:</label>
                    <span>
                      {customerDetails?.fullName ||
                        quotation.customer.name ||
                        "N/A"}
                    </span>
                  </div>
                  <div className="info-item">
                    <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                    <span>
                      {loadingCustomer ? (
                        <span className="loading-text">ƒêang t·∫£i...</span>
                      ) : (
                        customerDetails?.phone ||
                        quotation.customer.phone ||
                        "N/A"
                      )}
                    </span>
                  </div>
                  <div className="info-item">
                    <label>Email:</label>
                    <span>
                      {loadingCustomer ? (
                        <span className="loading-text">ƒêang t·∫£i...</span>
                      ) : (
                        customerDetails?.email ||
                        quotation.customer.email ||
                        "Ch∆∞a c·∫≠p nh·∫≠t"
                      )}
                    </span>
                  </div>
                  {customerDetails?.address && (
                    <div className="info-item">
                      <label>ƒê·ªãa ch·ªâ:</label>
                      <span>{customerDetails.address}</span>
                    </div>
                  )}
                  {customerDetails?.idNumber && (
                    <div className="info-item">
                      <label>CMND/CCCD:</label>
                      <span>{customerDetails.idNumber}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Vehicle Information */}
              <div className="detail-section">
                <h3>Th√¥ng tin xe</h3>
                <div className="info-grid">
                  <div className="info-item">
                    <label>T√™n xe:</label>
                    <span className="vehicle-full-name">
                      {quotation.vehicle.name || "N/A"}
                    </span>
                  </div>
                  <div className="info-item">
                    <label>M·∫´u xe:</label>
                    <span className="vehicle-model">
                      {quotation.vehicle.model || "N/A"}
                    </span>
                  </div>
                  <div className="info-item">
                    <label>Phi√™n b·∫£n:</label>
                    <span className="vehicle-version">
                      {quotation.vehicle.version || "N/A"}
                    </span>
                  </div>
                  <div className="info-item">
                    <label>M√†u s·∫Øc:</label>
                    <span className="vehicle-color">
                      {quotation.vehicle.color || "N/A"}
                    </span>
                  </div>
                  {quotation.vehicle.versionInfo && (
                    <>
                      <div className="info-item">
                        <label>T·∫ßm xa:</label>
                        <span className="vehicle-range">
                          {quotation.vehicle.versionInfo.range || "N/A"} km
                        </span>
                      </div>
                      <div className="info-item">
                        <label>Gia t·ªëc:</label>
                        <span className="vehicle-acceleration">
                          {quotation.vehicle.versionInfo.acceleration || "N/A"}
                        </span>
                      </div>
                      <div className="info-item">
                        <label>T·ªëc ƒë·ªô t·ªëi ƒëa:</label>
                        <span className="vehicle-topspeed">
                          {quotation.vehicle.versionInfo.topSpeed || "N/A"} km/h
                        </span>
                      </div>
                    </>
                  )}
                </div>
              </div>

              {/* Quotation Information */}
              <div className="detail-section">
                <h3>Th√¥ng tin b√°o gi√°</h3>
                <div className="info-grid">
                  <div className="info-item">
                    <label>QuoteID:</label>
                    <span className="quotation-id">#{quotation.id}</span>
                  </div>
                  <div className="info-item">
                    <label>Tr·∫°ng th√°i:</label>
                    <button
                      className={`status-button ${
                        isFinalized ? "finalized-btn" : "draft-btn"
                      }`}
                      disabled
                    >
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                      >
                        {isFinalized ? (
                          <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
                        ) : (
                          <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                        )}
                      </svg>
                      {isFinalized ? "Finalized" : "Draft"}
                    </button>
                  </div>
                  <div className="info-item">
                    <label>Ng√†y t·∫°o:</label>
                    <span>{quotation.date}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Summary & Actions */}
          <div className="detail-right">
            <div className="quotation-summary">
              <h3>Chi ti·∫øt t√≠nh gi√°</h3>
              <div className="pricing-breakdown">
                <div className="breakdown-row">
                  <span>Gi√° tr∆∞·ªõc gi·∫£m:</span>
                  <span>
                    {formatCurrency(
                      quotation.pricingDetails?.basePrice || quotation.amount
                    )}
                  </span>
                </div>
                <div className="breakdown-row">
                  <span>Gi√° sau gi·∫£m:</span>
                  <span>
                    {formatCurrency(
                      (quotation.pricingDetails?.basePrice ||
                        quotation.amount) -
                        (quotation.pricingDetails?.discountAmount ||
                          (quotation.amount * quotation.discount) / 100)
                    )}
                  </span>
                </div>
                <div className="breakdown-divider"></div>
                <div className="breakdown-row">
                  <span>T·ªïng gi√°:</span>
                  <span>
                    {formatCurrency(
                      ((quotation.pricingDetails?.basePrice ||
                        quotation.amount) -
                        (quotation.pricingDetails?.discountAmount ||
                          (quotation.amount * quotation.discount) / 100)) *
                        1.1
                    )}
                  </span>
                </div>
              </div>

              <div className="summary-actions">
                <button
                  type="button"
                  className={`send-quotation-btn ${
                    isSent
                      ? isFinalized
                        ? "confirmed-btn"
                        : "confirm-btn"
                      : ""
                  }`}
                  onClick={handleSendQuotation}
                  disabled={isFinalized}
                >
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" />
                  </svg>
                  {isFinalized
                    ? "ƒê√£ ghi nh·∫≠n"
                    : isSent
                    ? "Ghi nh·∫≠n b√°o gi√°"
                    : "G·ª≠i b√°o gi√°"}
                </button>

                <button
                  type="button"
                  className={`convert-order-btn ${
                    !isFinalized ? "disabled" : ""
                  }`}
                  onClick={handleConvertToOrder}
                  disabled={!isFinalized}
                >
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path d="M7 4V2C7 1.45 7.45 1 8 1H16C16.55 1 17 1.45 17 2V4H20C20.55 4 21 4.45 21 5S20.55 6 20 6H19V19C19 20.1 18.1 21 17 21H7C5.9 21 5 20.1 5 19V6H4C3.45 6 3 5.55 3 5S3.45 4 4 4H7ZM9 3V4H15V3H9ZM7 6V19H17V6H7Z" />
                  </svg>
                  Chuy·ªÉn sang ƒë∆°n h√†ng
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuotationDetailView;
